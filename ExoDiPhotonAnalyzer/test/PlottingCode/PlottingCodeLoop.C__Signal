#define PlottingCodeLoop_cxx
#include "PlottingCodeLoop.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TF1.h>
#include <TMath.h>
#include <TLorentzVector.h>
#include <algorithm>

using namespace std;

void PlottingCodeLoop::Loop()
{

  bool useDataMCEffScaleFactor = true;
  bool useDeltaPhiCut = true;

  if (fChain == 0) return;

  // for computing shifted pileup weights
  TH1D* signalPUHistOrig = (TH1D*)fChain->GetCurrentFile()->Get("diphotonSignalMCAnalyzer/fpu_n_BeforeCuts");
  TH1D* signalPUHist = (TH1D*)signalPUHistOrig->Clone();
  signalPUHist->SetBins(80,0,80);
  signalPUHist->Scale(1.0/signalPUHist->Integral());
  // for now, hardcode file location
  TFile* dataShiftUpFile = TFile::Open("PileupDataDec14thHistogramUpperSyst.root");
  TH1D* dataPUShiftUpHistOrig = (TH1D*)dataShiftUpFile->Get("pileup");
  TH1D* dataPUShiftUpHist = (TH1D*)dataPUShiftUpHistOrig->Clone();
  dataPUShiftUpHist->Scale(1.0/dataPUShiftUpHist->Integral());
  TH1D* pileupWeightsUpShiftHist = (TH1D*)dataPUShiftUpHist->Clone();
  pileupWeightsUpShiftHist->Divide(signalPUHist);
  // for now, hardcode file location
  TFile* dataShiftDownFile = TFile::Open("PileupDataDec14thHistogramLowerSyst.root");
  TH1D* dataPUShiftDownHistOrig = (TH1D*)dataShiftDownFile->Get("pileup");
  TH1D* dataPUShiftDownHist = (TH1D*)dataPUShiftDownHistOrig->Clone();
  dataPUShiftDownHist->Scale(1.0/dataPUShiftDownHist->Integral());
  TH1D* pileupWeightsDownShiftHist = (TH1D*)dataPUShiftDownHist->Clone();
  pileupWeightsDownShiftHist->Divide(signalPUHist);
  // end of computing shifted pileup weight hists
  
  cout<<"PlottingCodeLoop::Loop(): for signal; "<<fChain->GetEntries()<<" entries in Tree Chain"<<endl;

  Double_t PUweight = 1.;
  Double_t PUweightUpwardShift = 1.;
  Double_t PUweightDownwardShift = 1.;
  Double_t dataMCEffScaleFactorPhoton1 = 1.;
  Double_t dataMCEffScaleFactorPhoton2 = 1.;

  Long64_t nentries = fChain->GetEntriesFast();

  Long64_t nbytes = 0, nb = 0;
  for (Long64_t jentry=0; jentry<nentries;jentry++) {
    Long64_t ientry = LoadTree(jentry);
    if (ientry < 0) break;
    nb = fChain->GetEntry(jentry);   nbytes += nb;

    // fill all events hist here
    h_nEvents->Fill(0.5,MCPUWeight);
    
    // compute deltaRs, actual cut is below
    Float_t dphi1 = GenPhoton1_phi - Photon1_phi;
    if(dphi1 > 3.1415926) dphi1-=2.*3.1415926;
    if(dphi1 <= -3.1415926) dphi1+=2.*3.1415926;
    Float_t deta1 = GenPhoton1_eta - Photon1_eta;
    Float_t deltar1 = sqrt(deta1*deta1 + dphi1*dphi1);
    //
    Float_t dphi2 = GenPhoton2_phi - Photon2_phi;
    if(dphi2 > 3.1415926) dphi2-=2.*3.1415926;
    if(dphi2 <= -3.1415926) dphi2+=2.*3.1415926;
    Float_t deta2 = GenPhoton2_eta - Photon2_eta;
    Float_t deltar2 = sqrt(deta2*deta2 + dphi2*dphi2);
    // deltaR matching cuts
    if(deltar1 > 0.2) continue;
    if(deltar2 > 0.2) continue;

    if(useDataMCEffScaleFactor)
    {
      // scale factor numbers for tight PF, full 2012 at 8 TeV taken from our twiki page
      // tight PF ID * electronVeto
      if(fabs(Photon1_detEta) < 0.8)
        dataMCEffScaleFactorPhoton1 = 0.9703*0.9976;
      else // can only be in higher eta region in EB
        dataMCEffScaleFactorPhoton1 = 0.9764*0.9976;
      if(fabs(Photon2_detEta) < 0.8)
        dataMCEffScaleFactorPhoton2 = 0.9703*0.9976;
      else // can only be in higher eta region in EB
        dataMCEffScaleFactorPhoton2 = 0.9764*0.9976;
    }
    PUweight = MCPUWeight;
    // get pileup-shifted weights for pileup syst
    PUweightUpwardShift = pileupWeightsUpShiftHist->GetBinContent(pileupWeightsUpShiftHist->GetXaxis()->FindBin(Vtx_Nvtx));
    PUweightDownwardShift = pileupWeightsDownShiftHist->GetBinContent(pileupWeightsDownShiftHist->GetXaxis()->FindBin(Vtx_Nvtx));

    // now we have a well-matched photon, so calculate smearing and flag
    bool acceptedSmearedDiPhotonEvent = true;
    // smear both
    float dataOverMCResRatio = 1.32;
    float smearedPtPhoton1 = max(0.0,GenPhoton1_pt+dataOverMCResRatio*(Photon1_pt-GenPhoton1_pt));
    float smearedPtPhoton2 = max(0.0,GenPhoton2_pt+dataOverMCResRatio*(Photon2_pt-GenPhoton2_pt));
    float smearedEPhoton1 = smearedPtPhoton1*cosh(Photon1_eta);
    float smearedEPhoton2 = smearedPtPhoton2*cosh(Photon2_eta);
    TLorentzVector smearedFourVectorPhoton1;
    smearedFourVectorPhoton1.SetPtEtaPhiE(smearedPtPhoton1,Photon1_eta,Photon1_phi,smearedEPhoton1);
    TLorentzVector smearedFourVectorPhoton2;
    smearedFourVectorPhoton2.SetPtEtaPhiE(smearedPtPhoton2,Photon2_eta,Photon2_phi,smearedEPhoton2);
    float diphotonSmearedMass = (smearedFourVectorPhoton1+smearedFourVectorPhoton2).M();
    // check for passing selections: minv, dPhi, EB, Pt, detEta, ID
    if(diphotonSmearedMass < 200.) acceptedSmearedDiPhotonEvent = false;
    if(useDeltaPhiCut)
    {
      if(fabs(Diphoton_deltaPhi) < 2.8) acceptedSmearedDiPhotonEvent = false;
    }
    if(smearedPtPhoton1 < 80 || smearedPtPhoton2 < 80) acceptedSmearedDiPhotonEvent = false;
    if(!(Photon1_isEB && Photon2_isEB)) acceptedSmearedDiPhotonEvent = false;
    if(fabs(Photon1_detEta) > 1.4442 || fabs(Photon2_detEta) > 1.4442) acceptedSmearedDiPhotonEvent = false;
    //if( !(Photon1_isTightDetPhoton && Photon2_isTightDetPhoton) ) acceptedSmearedDiPhotonEvent = false;
    if( !(Photon1_isTightPFPhoton && Photon2_isTightPFPhoton) ) acceptedSmearedDiPhotonEvent = false;
    // fill for those passing selections
    if(acceptedSmearedDiPhotonEvent)
    {
      h_Diphoton_Minv_Smeared->Fill(diphotonSmearedMass,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
      h_Diphoton_Minv_Smeared_FineBinning->Fill(diphotonSmearedMass,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    }
    // end of smearing
    // scale shift up and flag
    float scaleShift = 0.01; // controls both up and down shift amount
    bool acceptedShiftedUpDiPhotonEvent = true;
    // shift both photons
    float scaleShiftUp = 1+scaleShift;
    float shiftedUpPtPhoton1 = scaleShiftUp*Photon1_pt;
    float shiftedUpPtPhoton2 = scaleShiftUp*Photon2_pt;
    float shiftedUpEPhoton1 = shiftedUpPtPhoton1*cosh(Photon1_eta);
    float shiftedUpEPhoton2 = shiftedUpPtPhoton2*cosh(Photon2_eta);
    TLorentzVector shiftedUpFourVectorPhoton1;
    shiftedUpFourVectorPhoton1.SetPtEtaPhiE(shiftedUpPtPhoton1,Photon1_eta,Photon1_phi,shiftedUpEPhoton1);
    TLorentzVector shiftedUpFourVectorPhoton2;
    shiftedUpFourVectorPhoton2.SetPtEtaPhiE(shiftedUpPtPhoton2,Photon2_eta,Photon2_phi,shiftedUpEPhoton2);
    float diphotonShiftedUpMass = (shiftedUpFourVectorPhoton1+shiftedUpFourVectorPhoton2).M();
    // check for passing selections: minv, dPhi, EB, Pt, detEta, ID
    if(diphotonShiftedUpMass < 200.) acceptedShiftedUpDiPhotonEvent = false;
    if(useDeltaPhiCut)
    {
      if(fabs(Diphoton_deltaPhi) < 2.8) acceptedShiftedUpDiPhotonEvent = false;
    }
    if(shiftedUpPtPhoton1 < 80 || shiftedUpPtPhoton2 < 80) acceptedShiftedUpDiPhotonEvent = false;
    if(!(Photon1_isEB && Photon2_isEB)) acceptedShiftedUpDiPhotonEvent = false;
    if(fabs(Photon1_detEta) > 1.4442 || fabs(Photon2_detEta) > 1.4442) acceptedShiftedUpDiPhotonEvent = false;
    //if( !(Photon1_isTightDetPhoton && Photon2_isTightDetPhoton) ) acceptedShiftedUpDiPhotonEvent = false;
    if( !(Photon1_isTightPFPhoton && Photon2_isTightPFPhoton) ) acceptedShiftedUpDiPhotonEvent = false;
    // fill for those passing selections
    if(acceptedShiftedUpDiPhotonEvent)
    {
      h_Diphoton_Minv_ScaleShiftedUp->Fill(diphotonShiftedUpMass,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
      h_Diphoton_Minv_ScaleShiftedUp_FineBinning->Fill(diphotonShiftedUpMass,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    }
    // end of shift up
    // scale shift down and flag
    bool acceptedShiftedDownDiPhotonEvent = true;
    // shift both
    float scaleShiftDown = 1-scaleShift;
    float shiftedDownPtPhoton1 = scaleShiftDown*Photon1_pt;
    float shiftedDownPtPhoton2 = scaleShiftDown*Photon2_pt;
    float shiftedDownEPhoton1 = shiftedDownPtPhoton1*cosh(Photon1_eta);
    float shiftedDownEPhoton2 = shiftedDownPtPhoton2*cosh(Photon2_eta);
    TLorentzVector shiftedDownFourVectorPhoton1;
    shiftedDownFourVectorPhoton1.SetPtEtaPhiE(shiftedDownPtPhoton1,Photon1_eta,Photon1_phi,shiftedDownEPhoton1);
    TLorentzVector shiftedDownFourVectorPhoton2;
    shiftedDownFourVectorPhoton2.SetPtEtaPhiE(shiftedDownPtPhoton2,Photon2_eta,Photon2_phi,shiftedDownEPhoton2);
    float diphotonShiftedDownMass = (shiftedDownFourVectorPhoton1+shiftedDownFourVectorPhoton2).M();
    // check for passing selections: minv, dPhi, EB, Pt, detEta, ID
    if(diphotonShiftedDownMass < 200.) acceptedShiftedDownDiPhotonEvent = false;
    if(useDeltaPhiCut)
    {
      if(fabs(Diphoton_deltaPhi) < 2.8) acceptedShiftedDownDiPhotonEvent = false;
    }
    if(shiftedDownPtPhoton1 < 80 || shiftedDownPtPhoton2 < 80) acceptedShiftedDownDiPhotonEvent = false;
    if(!(Photon1_isEB && Photon2_isEB)) acceptedShiftedDownDiPhotonEvent = false;
    if(fabs(Photon1_detEta) > 1.4442 || fabs(Photon2_detEta) > 1.4442) acceptedShiftedDownDiPhotonEvent = false;
    //if( !(Photon1_isTightDetPhoton && Photon2_isTightDetPhoton) ) acceptedShiftedDownDiPhotonEvent = false;
    if( !(Photon1_isTightPFPhoton && Photon2_isTightPFPhoton) ) acceptedShiftedDownDiPhotonEvent = false;
    // fill for those passing selections
    if(acceptedShiftedDownDiPhotonEvent)
    {
      h_Diphoton_Minv_ScaleShiftedDown->Fill(diphotonShiftedDownMass,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
      h_Diphoton_Minv_ScaleShiftedDown_FineBinning->Fill(diphotonShiftedDownMass,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    }
    // end of shift down
    

    // Event-level cuts (minv, deltaPhi if selected)
    if(Diphoton_Minv < 200.) continue;
    if(useDeltaPhiCut)
    {
      if(fabs(Diphoton_deltaPhi) < 2.8) continue;
    }
    // XXX SIC R9
    //if(Photon1_r9 <= 0.95 || Photon2_r9 <= 0.95) continue;
    //if(Photon1_r9 > 0.94 || Photon2_r9 > 0.94) continue;
    // XXX SIC R9

    // now apply the photon fiducial cuts -- isEB, Pt, detEta
    if(!(Photon1_isEB && Photon2_isEB && Photon1_pt>=80. && Photon2_pt>=80.))
      continue;
    if(fabs(Photon1_detEta) > 1.4442 || fabs(Photon2_detEta) > 1.4442)
      continue;


    // fill accepted events hist here
    h_nAcceptedEvents->Fill(0.5,MCPUWeight);
    h_Vtx_Nvtx_Acc->Fill(Vtx_Nvtx,PUweight);
    //
    acceptedEventsBothPhotonsNVtxVsGenPt->Fill(GenPhoton1_pt,Vtx_Nvtx,PUweight);
    acceptedEventsBothPhotonsNVtxVsGenPt->Fill(GenPhoton2_pt,Vtx_Nvtx,PUweight);
    acceptedEventsBothPhotonsNVtxVsDetEta->Fill(Photon1_detEta,Vtx_Nvtx,PUweight);
    acceptedEventsBothPhotonsNVtxVsDetEta->Fill(Photon2_detEta,Vtx_Nvtx,PUweight);
    acceptedEventsBothPhotonsGenPt->Fill(GenPhoton1_pt,PUweight);
    acceptedEventsBothPhotonsGenPt->Fill(GenPhoton2_pt,PUweight);
    // efficiency hists
    if(Photon1_isTightPFPhoton)
    {
      acceptedAndPFIDedEventsBothPhotonsNVtxVsGenPt->Fill(GenPhoton1_pt,Vtx_Nvtx,PUweight);
      acceptedAndPFIDedEventsBothPhotonsNVtxVsDetEta->Fill(Photon1_detEta,Vtx_Nvtx,PUweight);
      acceptedAndPFIDedEventsBothPhotonsGenPt->Fill(GenPhoton1_pt,PUweight);
    }
    if(Photon2_isTightPFPhoton)
    {
      acceptedAndPFIDedEventsBothPhotonsNVtxVsGenPt->Fill(GenPhoton2_pt,Vtx_Nvtx,PUweight);
      acceptedAndPFIDedEventsBothPhotonsNVtxVsDetEta->Fill(Photon2_detEta,Vtx_Nvtx,PUweight);
      acceptedAndPFIDedEventsBothPhotonsGenPt->Fill(GenPhoton2_pt,PUweight);
    }
    // efficiency hists


    // apply detector or PF ID  selection
    //if( !(Photon1_isTightDetPhoton && Photon2_isTightDetPhoton) ) continue;
    if( !(Photon1_isTightPFPhoton && Photon2_isTightPFPhoton) ) continue;

    // fill selected events hist here
    h_nSelectedEvents->Fill(0.5,MCPUWeight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);

    //cout<<"Pileup weight "<<PUweight<<endl;	

    h_Photon1_pt->Fill(Photon1_pt,PUweight*dataMCEffScaleFactorPhoton1);		
    h_Photon1_pt_log->Fill(Photon1_pt,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_eta->Fill(Photon1_eta,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_phi->Fill(Photon1_phi,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon2_pt->Fill(Photon2_pt,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_pt_log->Fill(Photon2_pt,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_phi->Fill(Photon2_phi,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_eta->Fill(Photon2_eta,PUweight*dataMCEffScaleFactorPhoton2);
    h_Diphoton_Minv->Fill(Diphoton_Minv,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Diphoton_Minv_FineBinning->Fill(Diphoton_Minv,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Diphoton_Minv_PileupShiftedUp->Fill(Diphoton_Minv,PUweightUpwardShift*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Diphoton_Minv_PileupShiftedUp_FineBinning->Fill(Diphoton_Minv,PUweightUpwardShift*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Diphoton_Minv_PileupShiftedDown->Fill(Diphoton_Minv,PUweightDownwardShift*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Diphoton_Minv_PileupShiftedDown_FineBinning->Fill(Diphoton_Minv,PUweightDownwardShift*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Diphoton_Minv_log->Fill(Diphoton_Minv,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Diphoton_qt->Fill(Diphoton_qt,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Diphoton_qt_log->Fill(Diphoton_qt,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Diphoton_deltaR->Fill(Diphoton_deltaR,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Diphoton_deltaPhi->Fill(Diphoton_deltaPhi,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Diphoton_deltaEta->Fill(Diphoton_deltaEta,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Diphoton_cosThetaStar->Fill(Diphoton_cosThetaStar,PUweight*dataMCEffScaleFactorPhoton1*dataMCEffScaleFactorPhoton2);
    h_Vtx_vx->Fill(Vtx_vx,PUweight);
    h_Vtx_vy->Fill(Vtx_vy,PUweight);
    h_Vtx_vz->Fill(Vtx_vz,PUweight);
    h_Vtx_Nvtx->Fill(Vtx_Nvtx,PUweight);
    h_Photon1_sigmaIetaIeta->Fill(Photon1_sigmaIetaIeta,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_sigmaEtaEta->Fill(Photon1_sigmaEtaEta,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_hadOverEm->Fill(Photon1_hadOverEm,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_hadOverEm_log->Fill(Photon1_hadOverEm,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_hadTowerOverEm->Fill(Photon1_hadTowerOverEm,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_trkIsoSumPtHollow04->Fill(Photon1_trkIsoSumPtHollow04,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_trkIsoSumPtHollow04_log->Fill(Photon1_trkIsoSumPtHollow04,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_trkIsoNtrksHollow04->Fill(Photon1_trkIsoNtrksHollow04,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_hcalIso04->Fill(Photon1_hcalIso04,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_hcalIso04_log->Fill(Photon1_hcalIso04,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_ecalIso04->Fill(Photon1_ecalIso04,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon1_detEta->Fill(Photon1_detEta,PUweight*dataMCEffScaleFactorPhoton1);
    h_Photon2_sigmaIetaIeta->Fill(Photon2_sigmaIetaIeta,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_sigmaEtaEta->Fill(Photon2_sigmaEtaEta,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_hadOverEm->Fill(Photon2_hadOverEm,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_hadOverEm_log->Fill(Photon2_hadOverEm,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_hadTowerOverEm->Fill(Photon2_hadTowerOverEm,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_trkIsoSumPtHollow04->Fill(Photon2_trkIsoSumPtHollow04,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_trkIsoSumPtHollow04_log->Fill(Photon2_trkIsoSumPtHollow04,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_trkIsoNtrksHollow04->Fill(Photon2_trkIsoNtrksHollow04,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_hcalIso04->Fill(Photon2_hcalIso04,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_hcalIso04_log->Fill(Photon2_hcalIso04,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_ecalIso04->Fill(Photon2_ecalIso04,PUweight*dataMCEffScaleFactorPhoton2);
    h_Photon2_detEta->Fill(Photon2_detEta,PUweight*dataMCEffScaleFactorPhoton2);
    //


  }//end of loop over entries    


  _outputfile->cd();
  h_nEvents->Write();
  h_nAcceptedEvents->Write();
  h_nSelectedEvents->Write();
  h_Photon1_pt->Write();
  h_Photon1_pt_log->Write();
  h_Photon1_eta->Write();
  h_Photon1_phi->Write();
  h_Photon2_pt->Write();
  h_Photon2_pt_log->Write();
  h_Photon2_phi->Write();
  h_Photon2_eta->Write();
  h_Diphoton_Minv->Write();
  h_Diphoton_Minv_FineBinning->Write();
  h_Diphoton_Minv_PileupShiftedUp->Write();
  h_Diphoton_Minv_PileupShiftedUp_FineBinning->Write();
  h_Diphoton_Minv_PileupShiftedDown->Write();
  h_Diphoton_Minv_PileupShiftedDown_FineBinning->Write();
  h_Diphoton_Minv_Smeared->Write();
  h_Diphoton_Minv_Smeared_FineBinning->Write();
  h_Diphoton_Minv_ScaleShiftedUp->Write();
  h_Diphoton_Minv_ScaleShiftedUp_FineBinning->Write();
  h_Diphoton_Minv_ScaleShiftedDown->Write();
  h_Diphoton_Minv_ScaleShiftedDown_FineBinning->Write();
  h_Diphoton_Minv_log->Write();
  h_Diphoton_qt->Write();
  h_Diphoton_qt_log->Write();
  h_Diphoton_deltaR->Write();
  h_Diphoton_deltaPhi->Write();
  h_Diphoton_deltaEta->Write();
  h_Diphoton_cosThetaStar->Write(); 
  h_Vtx_vx->Write();
  h_Vtx_Nvtx_Acc->Write();
  h_Vtx_Nvtx->Write();
  h_Vtx_vy->Write();
  h_Vtx_vz->Write();
  h_Photon1_sigmaIetaIeta->Write();
  h_Photon1_sigmaEtaEta->Write();
  h_Photon1_hadOverEm->Write();
  h_Photon1_hadOverEm_log->Write();
  h_Photon1_hadTowerOverEm->Write();
  h_Photon1_trkIsoSumPtHollow04->Write();
  h_Photon1_trkIsoSumPtHollow04_log->Write();
  h_Photon1_trkIsoNtrksHollow04->Write();
  h_Photon1_hcalIso04->Write();
  h_Photon1_hcalIso04_log->Write();
  h_Photon1_ecalIso04->Write();
  h_Photon1_detEta->Write();
  h_Photon2_sigmaIetaIeta->Write();
  h_Photon2_sigmaEtaEta->Write();
  h_Photon2_hadOverEm->Write();
  h_Photon2_hadOverEm_log->Write();
  h_Photon2_hadTowerOverEm->Write();
  h_Photon2_trkIsoSumPtHollow04->Write();
  h_Photon2_trkIsoSumPtHollow04_log->Write();
  h_Photon2_trkIsoNtrksHollow04->Write();
  h_Photon2_hcalIso04->Write();
  h_Photon2_hcalIso04_log->Write();  
  h_Photon2_ecalIso04->Write();
  h_Photon2_detEta->Write();
  //
  acceptedEventsBothPhotonsNVtxVsGenPt->Write();
  acceptedEventsBothPhotonsNVtxVsDetEta->Write();
  acceptedAndPFIDedEventsBothPhotonsNVtxVsGenPt->Write();
  acceptedAndPFIDedEventsBothPhotonsNVtxVsDetEta->Write();
  acceptedEventsBothPhotonsGenPt->Write();
  acceptedAndPFIDedEventsBothPhotonsGenPt->Write();

  _outputfile->Close();   

  cout << "Total reweighted entries: " << h_nEvents->Integral() << " total selected entries: " << h_Diphoton_Minv->Integral() << " acc=" << h_nAcceptedEvents->Integral()/h_nEvents->Integral() <<
    " sel=" << h_nSelectedEvents->Integral()/h_nAcceptedEvents->Integral() <<
    " acc*eff=" << h_Diphoton_Minv->Integral()/h_nEvents->Integral() << endl;

}//end of Loop method
